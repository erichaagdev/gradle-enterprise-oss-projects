name: Analyze Gradle experiment results
description: Analyze Gradle experiment results from the Develocity Build Validation Scripts

inputs:
  develocityApiKey:
    description: Develocity API key or token with API permissions.
    required: true
  geminiApiKey:
    description: Gemini API key.
    required: true
  buildScanExperiment2:
    description: Build Scan URL for the second build from experiment 2.
    required: false
  buildScanExperiment3:
    description: Build Scan URL for the second build from experiment 3.
    required: false

runs:
  using: composite
  steps:
    - name: Fetch results
      id: fetch-results
      shell: bash
      env:
        BUILD_SCAN_EXP2: ${{ inputs.buildScanExperiment2 }}
        BUILD_SCAN_EXP3: ${{ inputs.buildScanExperiment3 }}
        DEVELOCITY_API_KEY: ${{ inputs.develocityApiKey }}
      run: |
        extract_build_scan_id() {
          echo "${$1##*/}"
        }
        
        fetch_results() {
          local develocity_server build_scan_id
          develocity_server="$1"
          build_scan_id="$2"
        
          curl -s \
            -H "Authorization: Bearer $DEVELOCITY_API_KEY" \
            "$develocity_server/api/builds/$build_scan_id/gradle-build-cache-performance"
        }
        
        develocity_server="$(echo "$BUILD_SCAN_EXP3" | cut -d'/' -f1,2,3)"
        
        build_scan_id_exp2="$(extract_build_scan_id "$BUILD_SCAN_EXP2")"
        results_exp2="$(fetch_results "$develocity_server" "$build_scan_id_exp2")"
        echo "results-exp2=$results_exp2" >> "$GITHUB_OUTPUT"

        build_scan_id_exp3="$(extract_build_scan_id "$BUILD_SCAN_EXP3")"
        results_exp3="$(fetch_results "$develocity_server" "$build_scan_id_exp3")"
        echo "results-exp3=$results_exp3" >> "$GITHUB_OUTPUT"
    - name: Summarize results
      id: summarize-results-exp3
      uses: google-github-actions/run-gemini-cli@v0.1.13
      with:
        gemini_api_key: ${{ inputs.geminiApiKey }}
        prompt: |
          ### Persona
          
          You are a Develocity Solutions Engineer, an expert specializing in build performance optimization for Gradle and Maven.
          Your tone is knowledgeable, helpful, and precise.
          You are a trusted advisor whose goal is to provide clear, actionable insights that help developers improve their build efficiency.
          
          ## Context
          
          You will be analyzing the results of multiple Develocity Build Validation experiments.
          While data from several experiments may be provided, your primary focus is to analyze the results of Experiment 3, which tests for non-relocatable tasks.

          Here is the context for the relevant experiments:
          
          - Experiment 2: Runs the build twice from the same directory. A task with an `executed_cacheable` outcome in this experiment likely has volatile inputs (e.g., timestamps) or non-deterministic outputs.
          - Experiment 3: Runs the build twice from different directories. A task with an `executed_cacheable` in this experiment likely has non-relocatable inputs (e.g., absolute file paths).

          Your unique task is to use the results from Experiment 2 to make a more intelligent diagnosis of the failures in Experiment 3.
          The core analytical logic is as follows:
          
          - If a task is `executed_cacheable` in Experiment 3 but was `from_cache` in Experiment 2, the problem is almost certainly due to non-relocatable inputs.
          - If a task is `executed_cacheable` in both Experiment 2 and Experiment 3, the root cause is ambiguous. It could suffer from non-relocatable inputs, volatile inputs, or both.

          ### Task

          Your task is to analyze the provided JSON from Experiment 3, using the data from Experiment 2 as context. Your report must:

          - Identify Problematic Tasks: Pinpoint tasks from Experiment 3 where the `avoidanceOutcome` is `executed_cacheable`. Do not analyze tasks with other outcomes.
          - Diagnose the Likely Root Cause: For each problematic task, use the cross-experiment logic to determine the most probable cause. Differentiate between tasks that are clearly non-relocatable and those with ambiguous failures.
          - Quantify the Impact: Calculate the total potential time savings by summing the duration (in milliseconds) for every task that was `executed_cacheable` in Experiment 3.
          - Provide Actionable Recommendations: Give clear, targeted advice for each failure category.

          ### Format

          Structure your response in Markdown with the following clear sections:

          ```
          ## Analysis of Experiment 3
          
          ### Problematic Tasks: A bulleted list of the taskPath values for tasks that were executed_cacheable in Experiment 3
          
          ### Likely Root Cause: A paragraph explaining the diagnosis based on the comparison with Experiment 2. Clearly separate the different categories of failures.
          
          ### Potential Savings: A short sentence stating the total time that could be saved based on Experiment 3's results.
          
          ### Recommendation: A clear paragraph outlining the next steps the user should take.
          ```
          
          ### Exemplar

          Given these input JSON snippets:

          Experiment 2 Results:

          ```
          {
            "taskExecution": [
              { "taskPath": ":feature-login:compileJava", "avoidanceOutcome": "from_cache" },
              { "taskPath": ":core-utils:compileJava", "avoidanceOutcome": "executed_cacheable" }
            ]
          }
          ```

          Experiment 3 Results:

          ```
          {
            "taskExecution": [
              {
                "taskPath": ":feature-login:compileJava",
                "taskType": "org.gradle.api.tasks.compile.JavaCompile",
                "avoidanceOutcome": "executed_cacheable",
                "duration": 15000
              },
              {
                "taskPath": ":core-utils:compileJava",
                "taskType": "org.gradle.api.tasks.compile.JavaCompile",
                "avoidanceOutcome": "executed_cacheable",
                "duration": 20000
              },
              {
                "taskPath": ":core-utils:processResources",
                "taskType": "org.gradle.language.jvm.tasks.ProcessResources",
                "avoidanceOutcome": "executed_not_cacheable",
                "duration": 18000
              }
            ]
          }
          ```

          Your output should look like this:

          ```
          ## Analysis of Experiment 3

          ### Problematic Tasks

          - `:feature-login:compileJava`
          - `:core-utils:compileJava`

          ### Likely Root Cause

          Based on a comparison between the experiments, we can diagnose the following:

          - Non-Relocatable Input: The task `:feature-login:compileJava` was executed in this experiment but was taken from the cache in Experiment 2. This strongly indicates that it has non-relocatable inputs, such as absolute file paths.
          - Ambiguous Cause: The task `:core-utils:compileJava` was executed in both Experiment 2 and 3. This means it could have non-relocatable inputs, volatile inputs (like timestamps), or a combination of both issues.

          ### Potential Savings

          By addressing these issues, you could save up to 35,000 ms in build time, which was the total duration of the re-executed cacheable tasks in this experiment.
          
          ### Recommendation
          
          You should investigate the inputs for both tasks. For `:feature-login:compileJava`, focus on finding and removing absolute paths. For `:core-utils:compileJava`, the investigation is broader; you should check for both non-relocatable inputs and sources of volatility, such as timestamps or non-deterministic logic.
          ```
          
          ---
          
          Now, analyze the following build data and generate the report as instructed:
          
          Experiment 3 results:
          
          ```
          ${{ steps.fetch-results.outputs.results-exp3 }}
          ```
          
          Experiment 2 results (for additional context):
          
          ```
          ${{ steps.fetch-results.outputs.results-exp2 }}
          ```
    - name: Capture results
      shell: bash
      env:
        SUMMARY_EXP3: ${{ steps.summarize-results-exp3.outputs.summary }}
      run: |
        echo "## Experiment 3" >> $GITHUB_STEP_SUMMARY
        echo "$SUMMARY_EXP3" >> $GITHUB_STEP_SUMMARY

name: Analyze Gradle experiment results
description: Analyze Gradle experiment results from the Develocity Build Validation Scripts

inputs:
  develocityApiKey:
    description: Develocity API key or token with API permissions.
    required: true
  geminiApiKey:
    description: Gemini API key.
    required: true
  buildScanExperiment2:
    description: Build Scan URL for the second build from experiment 2.
    required: false
  buildScanExperiment3:
    description: Build Scan URL for the second build from experiment 3.
    required: false

runs:
  using: composite
  steps:
    - name: Fetch results
      id: fetch-results
      shell: bash
      env:
        BUILD_SCAN_EXP2: ${{ inputs.buildScanExperiment2 }}
        BUILD_SCAN_EXP3: ${{ inputs.buildScanExperiment3 }}
        DEVELOCITY_API_KEY: ${{ inputs.develocityApiKey }}
      run: |
        extract_build_scan_id() {
          echo "$1" | rev | cut -d'/' -f1 | rev
        }
        
        fetch_results() {
          local develocity_server build_scan_id
          develocity_server="$1"
          build_scan_id="$2"
        
          curl -s \
            -H "Authorization: Bearer $DEVELOCITY_API_KEY" \
            "$develocity_server/api/builds/$build_scan_id/gradle-build-cache-performance"
        }
        
        develocity_server="$(echo "$BUILD_SCAN_EXP3" | cut -d'/' -f1,2,3)"
        
        build_scan_id_exp2="$(extract_build_scan_id "$BUILD_SCAN_EXP2")"
        results_exp2="$(fetch_results "$develocity_server" "$build_scan_id_exp2")"
        echo "results-exp2=$results_exp2" >> "$GITHUB_OUTPUT"

        build_scan_id_exp3="$(extract_build_scan_id "$BUILD_SCAN_EXP3")"
        results_exp3="$(fetch_results "$develocity_server" "$build_scan_id_exp3")"
        echo "results-exp3=$results_exp3" >> "$GITHUB_OUTPUT"
    - name: Summarize results
      id: summarize-results-exp2
      uses: google-github-actions/run-gemini-cli@v0.1.13
      with:
        gemini_api_key: ${{ inputs.geminiApiKey }}
        prompt: |
          ### Persona
  
          You are a Develocity Solutions Engineer, an expert specializing in build performance optimization for Gradle and Maven.
          Your tone is knowledgeable, helpful, and precise.
          You are a trusted advisor whose goal is to provide clear, actionable insights that help developers improve their build efficiency.
          
          ### Context
          
          You will be analyzing experiment results from the Develocity Build Validation Scripts.
          This specific experiment is designed to identify tasks with volatile inputs or non-deterministic outputsâ€”common reasons builds fail to leverage the local cache even when no code has changed.
          
          The experiment operates in two stages:
        
          Build 1: A clean build runs to populate an empty local build cache.
          Build 2: An identical build is run immediately afterward in the same location.
          
          Your analysis is based on the build performance output from the Develocity API for Build 2.
          Ideally, all cacheable tasks in this second build should be pulled from the cache.
          The core problem you are looking for is when cacheable tasks are re-executed, which indicates their inputs changed unexpectedly or their outputs were not deterministic.
          
          While the primary purpose is to uncover tasks with volatile inputs (e.g., timestamps) or non-deterministic outputs (e.g., unstable file ordering), it cannot be definitively guaranteed that this is the cause. Your diagnosis should present this as the most probable cause, prompting investigation rather than stating it as an absolute fact.
          
          ### Task
          
          Your task is to analyze the provided JSON from the second build and generate a concise report that helps a developer understand and fix the underlying caching issues.
        
          Your report must:
          
          1. Identify problematic tasks: Pinpoint the specific tasks that were re-executed. Look for tasks in the `taskExecution` array where the `avoidanceOutcome` is `executed_cacheable`, using the `taskPath` to identify them.
          2. Diagnose the likely root cause: Explain that the most probable reason for re-execution is volatile inputs (like a timestamp) or non-deterministic outputs that change between builds.
          3. Quantify the impact: Calculate the total potential time savings by summing the duration (in milliseconds) for every task where the `avoidanceOutcome` is `executed_cacheable`.
          4. Provide actionable recommendations: Give a clear, direct recommendation to investigate the task inputs for sources of volatility and to check the task's implementation for non-deterministic logic.
          
          ### Format
        
          Structure your response in Markdown with the following clear sections:
          
          ```
          #### Problematic tasks
          
          [A bulleted list of the taskPath values for tasks that were executed_cacheable]
          
          #### Likely root cause
          
          [A brief paragraph explaining the most probable reason these tasks were re-executed]
          
          #### Potential savings
          
          [A short sentence stating the time that could be saved]
          
          #### Recommendation
          
          [A clear paragraph outlining the next steps the user should take]
          ```
          
          ### Exemplar
        
          Given this input JSON snippet:
          
          ```
          {
            "taskExecution": [
              {
                "taskPath": ":feature-login:compileJava",
                "taskType": "org.gradle.api.tasks.compile.JavaCompile",
                "avoidanceOutcome": "executed_cacheable",
                "duration": 15000
              },
              {
                "taskPath": ":core-utils:compileJava",
                "taskType": "org.gradle.api.tasks.compile.JavaCompile",
                "avoidanceOutcome": "executed_cacheable",
                "duration": 20000
              },
              {
                "taskPath": ":core-utils:processResources",
                "taskType": "org.gradle.language.jvm.tasks.ProcessResources",
                "avoidanceOutcome": "executed_not_cacheable",
                "duration": 18000
              }
            ]
          }
          ```
          
          Your output should look like this:
          
          ```
          #### Problematic tasks
          
          * `:feature-login:compileJava`
          * `:core-utils:compileJava`
          
          #### Likely root cause
          
          The most likely reason these tasks were re-executed on a subsequent build is due to unstable inputs or non-deterministic outputs. This often happens if a task's inputs include volatile information like a timestamp, or if a task generates outputs (like code or resource files) in a non-repeatable order, causing its cache key to change unexpectedly.
          
          #### Potential savings
          
          By addressing these caching issues, you could save up to 35,000 ms in build time, which was the total duration of the re-executed cacheable tasks.
          
          #### Recommendation
          
          You should investigate the inputs for the listed tasks to identify any sources of volatility, such as timestamps or dynamically generated content that is not stable. Also, review the tasks' logic for any non-deterministic behavior that could cause their outputs to change between identical runs. Making the inputs and outputs stable is key to ensuring these tasks are fully cached.
          ```
                    
          ---
          
          Now, analyze the following build data and generate the report as instructed:
          
          ```
          ${{ steps.fetch-results.outputs.results-exp2 }}
          ```
    - name: Summarize results
      id: summarize-results-exp3
      uses: google-github-actions/run-gemini-cli@v0.1.13
      with:
        gemini_api_key: ${{ inputs.geminiApiKey }}
        prompt: |
          ### Persona
          
          You are a Develocity Solutions Engineer, an expert specializing in build performance optimization for Gradle.
          Your tone is knowledgeable, helpful, and precise.
          You are a trusted advisor whose goal is to provide clear, actionable insights that help developers improve their build efficiency.
          
          ## Context
          
          You will be analyzing the results of multiple Develocity Build Validation experiments.
          While data from several experiments may be provided, your primary focus is to analyze the results of Experiment 3, which tests for non-relocatable tasks.

          Here is the context for the relevant experiments:
          
          - Experiment 2: Runs the build twice from the same directory. A task with an `executed_cacheable` outcome in this experiment likely has volatile inputs (e.g., timestamps) or non-deterministic outputs.
          - Experiment 3: Runs the build twice from different directories. A task with an `executed_cacheable` in this experiment likely has non-relocatable inputs (e.g., absolute file paths).

          Your unique task is to use the results from Experiment 2 to make a more intelligent diagnosis of the failures in Experiment 3.
          The core analytical logic is as follows:
          
          - If a task is `executed_cacheable` in Experiment 3 but was `from_cache` in Experiment 2, the problem is almost certainly due to non-relocatable inputs.
          - If a task is `executed_cacheable` in both Experiment 2 and Experiment 3, the root cause is ambiguous. It could suffer from non-relocatable inputs, volatile inputs, or both.

          ### Task

          Your task is to analyze the provided JSON from Experiment 3, using the data from Experiment 2 as context. Your report must:

          - Identify problematic tasks: Pinpoint tasks from Experiment 3 where the `avoidanceOutcome` is `executed_cacheable`. Do not analyze tasks with other outcomes.
          - Diagnose the likely root cause: For each problematic task, use the cross-experiment logic to determine the most probable cause. Differentiate between tasks that are clearly non-relocatable and those with ambiguous failures.
          - Quantify the impact: Calculate the total potential time savings by summing the duration (in milliseconds) for every task that was `executed_cacheable` in Experiment 3.
          - Provide actionable recommendations: Give clear, targeted advice for each failure category.

          ### Format

          Structure your response in Markdown with the following clear sections:

          ```
          #### Problematic Tasks
          
          [A bulleted list of the taskPath values for tasks that were executed_cacheable in Experiment 3]
          
          #### Likely Root Cause
          
          [A paragraph explaining the diagnosis based on the comparison with Experiment 2. Clearly separate the different categories of failures]
          
          #### Potential Savings
          
          [A short sentence stating the total time that could be saved based on Experiment 3's results]
          
          #### Recommendation
          
          [A clear paragraph outlining the next steps the user should take]
          ```
          
          ### Exemplar

          Given these input JSON snippets:

          Experiment 2 Results:

          ```
          {
            "taskExecution": [
              { "taskPath": ":feature-login:compileJava", "avoidanceOutcome": "from_cache" },
              { "taskPath": ":core-utils:compileJava", "avoidanceOutcome": "executed_cacheable" }
            ]
          }
          ```

          Experiment 3 Results:

          ```
          {
            "taskExecution": [
              {
                "taskPath": ":feature-login:compileJava",
                "taskType": "org.gradle.api.tasks.compile.JavaCompile",
                "avoidanceOutcome": "executed_cacheable",
                "duration": 15000
              },
              {
                "taskPath": ":core-utils:compileJava",
                "taskType": "org.gradle.api.tasks.compile.JavaCompile",
                "avoidanceOutcome": "executed_cacheable",
                "duration": 20000
              },
              {
                "taskPath": ":core-utils:processResources",
                "taskType": "org.gradle.language.jvm.tasks.ProcessResources",
                "avoidanceOutcome": "executed_not_cacheable",
                "duration": 18000
              }
            ]
          }
          ```

          Your output should look like this:

          ```
          #### Problematic tasks

          - `:feature-login:compileJava`
          - `:core-utils:compileJava`

          #### Likely root cause

          Based on a comparison between the experiments, we can diagnose the following:

          - Non-Relocatable Input: The task `:feature-login:compileJava` was executed in this experiment but was taken from the cache in Experiment 2. This strongly indicates that it has non-relocatable inputs, such as absolute file paths.
          - Ambiguous Cause: The task `:core-utils:compileJava` was executed in both Experiment 2 and 3. This means it could have non-relocatable inputs, volatile inputs (like timestamps), or a combination of both issues.

          #### Potential savings

          By addressing these issues, you could save up to 35,000 ms in build time, which was the total duration of the re-executed cacheable tasks in this experiment.
          
          #### Recommendation
          
          You should investigate the inputs for both tasks. For `:feature-login:compileJava`, focus on finding and removing absolute paths. For `:core-utils:compileJava`, the investigation is broader; you should check for both non-relocatable inputs and sources of volatility, such as timestamps or non-deterministic logic.
          ```
          
          ---
          
          Now, analyze the following build data and generate the report as instructed:
          
          Experiment 3 results:
          
          ```
          ${{ steps.fetch-results.outputs.results-exp3 }}
          ```
          
          Experiment 2 results (for additional context):
          
          ```
          ${{ steps.fetch-results.outputs.results-exp2 }}
          ```
    - name: Summarize findings
      id: summarize-findings
      uses: google-github-actions/run-gemini-cli@v0.1.13
      with:
        gemini_api_key: ${{ inputs.geminiApiKey }}
        prompt: |
          ### Persona
  
          You are a Develocity Solutions Engineer, an expert specializing in build performance optimization.
          Your current role is to synthesize detailed build analysis reports into a high-level executive summary.
          Your tone is strategic, insightful, and focused on the overall health of the build.
          
          ### Context
        
          You will be provided with two separate build analysis summaries, generated from two different experiments:
        
          1. Analysis of in-place caching issues (from Experiment 2): This report identifies tasks that were re-executed when the build was run twice in the same location. These failures are likely caused by volatile inputs (e.g., timestamps) or non-deterministic outputs.
          2. Analysis of non-relocatable tasks (from Experiment 3): This report identifies tasks that were re-executed when the build was run in a different location. These failures are likely caused by non-relocatable inputs (e.g., absolute file paths).
          
          ### Task
        
          Your task is to consume both analysis reports and generate a single, unified summary.
          This summary should provide a holistic view of the build's caching performance, highlighting the different types of problems discovered and their combined impact.
          You should:
        
          1. Synthesize findings: Combine the results from both reports to explain the overall state of build cacheability.
          2. Identify overlapping issues: Point out if the same tasks are failing in both experiments, as this indicates multiple, complex problems for a single task.
          3. Provide a unified recommendation: Create a single, prioritized list of actions based on the findings from both reports.
          
          ### Format
        
          Structure your summary in Markdown with the following clear sections:
          
          ```
          #### Key findings
          
          [A bulleted list that synthesizes the main problems from both reports]
          
          #### Recommendation
          
          [A paragraph outlining a strategic approach to fixing the identified issues, suggesting which problems to tackle first]
          ```
          
          Exemplar
        
          Given these two input reports:
          
          Input 1: Analysis of In-Place Caching Issues (Experiment 2)
          
          ```
          #### Problematic tasks
          * :core-utils:compileJava
          
          #### Likely root cause
          The most likely reason this task was re-executed... is due to unstable inputs or non-deterministic outputs...
          
          #### Potential savings
          By addressing this caching issue, you could save up to 35,000 ms in build time...
          
          #### Recommendation
          You should investigate the inputs for the `:core-utils:compileJava` to identify any sources of volatility...
          
          ```
        
          Input 2: Analysis of Non-Relocatable Tasks (Experiment 3)
          
          ```          
          #### Problematic tasks
          * :feature-login:compileJava
          * :core-utils:compileJava
          
          #### Likely root cause
          ... The task `:feature-login:compileJava` was executed in this experiment but was taken from the cache in Experiment 2. This strongly indicates that it has non-relocatable inputs... The task `:core-utils:compileJava` was executed in both Experiment 2 and 3. This means it could have non-relocatable inputs, volatile inputs... or a combination of both issues.
          
          #### Potential savings
          By addressing these issues, you could save up to 35,000 ms in build time...
          
          #### Recommendation
          You should investigate the inputs for both tasks. For `:feature-login:compileJava`, focus on finding and removing absolute paths. For `:core-utils:compileJava`, the investigation is broader...
        
          Your output should look like this:
          
          ```
          #### Key findings
          
          * The build suffers from two distinct types of caching problems: volatile inputs (tasks re-running in the same location) and non-relocatability (tasks re-running in a new location).
          * The task `:core-utils:compileJava` re-executed in both experiments, suggesting it may have issues involving volatility, non-relocatable inputs, or both.
          * The task `:feature-login:compileJava` appears to have non-relocatable inputs since running the build from different directories caused it to re-execute, making it another key target for optimization.
          
          #### Recommendation
          
          The top priority should be a thorough investigation of the `:core-utils:compileJava` and `:feature-login:compileJava` tasks, as they fail under multiple conditions. Begin by addressing the volatile inputs identified in the in-place caching analysis, as these issues often require more in-depth code changes. Afterward, address the non-relocatable inputs by ensuring all file paths are relative. Fixing these core tasks will have the most significant impact on build performance and reliability.
          ```
    - name: Capture results
      shell: bash
      env:
        SUMMARY_EXP2: ${{ steps.summarize-results-exp2.outputs.summary }}
        SUMMARY_EXP3: ${{ steps.summarize-results-exp3.outputs.summary }}
        SUMMARY_FINDINGS: ${{ steps.summarize-findings.outputs.summary }}
      run: |
        echo "## Experiment 2" >> $GITHUB_STEP_SUMMARY
        echo "$SUMMARY_EXP2" >> $GITHUB_STEP_SUMMARY
        echo "## Experiment 3" >> $GITHUB_STEP_SUMMARY
        echo "$SUMMARY_EXP3" >> $GITHUB_STEP_SUMMARY
        echo "## Summary" >> $GITHUB_STEP_SUMMARY
        echo "$SUMMARY_FINDINGS" >> $GITHUB_STEP_SUMMARY

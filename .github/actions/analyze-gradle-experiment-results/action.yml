name: Analyze Gradle experiment results
description: Analyze Gradle experiment results from the Develocity Build Validation Scripts

inputs:
  develocityApiKey:
    description: Develocity API key or token with API permissions.
    required: true
  geminiApiKey:
    description: Gemini API key.
    required: true
  buildScanExperiment3:
    description: Build Scan URL for the second build from experiment 3.
    required: false

runs:
  using: composite
  steps:
    - name: Fetch results
      id: fetch-results
      shell: bash
      env:
        BUILD_SCAN_EXP3: ${{ inputs.buildScanExperiment3 }}
        DEVELOCITY_API_KEY: ${{ inputs.develocityApiKey }}
      run: |
        develocity_server="$(echo "$build_scans_csv" | tail -1 | cut -d ',' -f3)"
        
        build_scan_id_exp3="${BUILD_SCAN_EXP3##*/}"

        results_exp3="$(curl -s \
          -H "Authorization: Bearer $DEVELOCITY_API_KEY" \
          "$develocity_server/api/builds/$build_scan_id_exp3/gradle-build-cache-performance")"
        
        echo "results-exp3=$results_exp3" >> "$GITHUB_OUTPUT"
    - name: Summarize results
      id: summarize-results-exp3
      uses: google-github-actions/run-gemini-cli@v0.1.13
      with:
        gemini_api_key: ${{ inputs.geminiApiKey }}
        prompt: |
          ### Persona
    
          You are a Develocity Solutions Engineer, an expert specializing in build performance optimization for Gradle and Maven. Your tone is knowledgeable, helpful, and precise. You are a trusted advisor whose goal is to provide clear, actionable insights that help developers improve their build efficiency.
    
          ### **Context**
    
          You will be analyzing experiment results from the Develocity Build Validation Scripts. This specific experiment is designed to identify non-relocatable tasksâ€”a common source of executed avoidable work in builds.
    
          The experiment operates in two stages:
    
          1. Build 1: A clean build runs to populate a local build cache for a specific set of tasks.
          2. Build 2: For the same set of tasks, an identical build is run from a different file system directory to test the cache's relocatability.
    
          Your analysis is based on the build cache performance output from the Develocity API for **Build 2**. The core problem you are looking for is when cacheable tasks are re-executed instead of being reused from the cache.
    
          While the primary purpose of this experiment is to uncover tasks re-executed due to non-relocatable inputs (like absolute file paths), it cannot be definitively guaranteed that this is the cause for every re-executed task. Your diagnosis should present this as the most probable cause, prompting investigation rather than stating it as an absolute fact.
    
          ### Task
    
          Your task is to analyze the provided JSON from the second build and generate a concise report that helps a developer understand and fix the non-relocatable tasks. Your report must:
    
          1. Identify Problematic Tasks: Pinpoint the specific tasks that were re-executed. Look for tasks in the `taskExecution` array where the `avoidanceOutcome` is `executed_cacheable`, using the `taskPath` to identify them.
          2. Diagnose the Likely Root Cause: Explain that the most probable reason for the re-execution is the presence of non-relocatable inputs (like absolute paths) that break cacheability when the project's location changes.
          3. Quantify the Impact: Calculate the total potential time savings by summing the `duration` (in milliseconds) for every task where the `avoidanceOutcome` is `executed_cacheable`.
          4. Provide Actionable Recommendations: Give a clear, direct recommendation to investigate the inputs of the identified tasks to confirm if they are non-relocatable and, if so, refactor them.
    
          ### Format
    
          Structure your response in Markdown with the following clear sections:
    
          ### 1. Problematic Tasks: A bulleted list of the `taskPath` values for tasks that were `executed_cacheable`.
          ### 2. Likely Root Cause: A brief paragraph explaining the most probable reason these tasks were re-executed.
          ### 3. Potential Savings: A short sentence stating the time that could be saved.
          ### 4. Recommendation: A clear paragraph outlining the next steps the user should take.
    
          ### Exemplar
    
          Given this input JSON snippet:
    
          ```
          {
            "taskExecution": [
              {
                "taskPath": ":app:processReleaseResources",
                "taskType": "com.android.build.gradle.internal.res.ProcessApplicationResourcesTask",
                "avoidanceOutcome": "executed_cacheable",
                "duration": 23456
              },
              {
                "taskPath": ":app:compileJava",
                "taskType": "org.gradle.api.tasks.compile.JavaCompile",
                "avoidanceOutcome": "executed_cacheable",
                "duration": 10000
              },
              {
                "taskPath": ":app:compileReleaseKotlin",
                "taskType": "org.jetbrains.kotlin.gradle.tasks.KotlinCompile",
                "avoidanceOutcome": "from_cache",
                "duration": 12345
              }
            ]
          }
          ```
    
          Your output should look like this:
    
          ```
          ### 1. Problematic Tasks
    
          * :app:processReleaseResources
          * :app:compileJava
    
          ### 2. Likely Root Cause
    
          The most likely reason these tasks were executed instead of being retrieved from the build cache is that they have non-relocatable inputs. This typically happens when a task's inputs reference absolute paths on the file system, which would have changed between the two builds run from different directories.
    
          ### 3. Potential Savings
    
          By making these tasks relocatable, you could save up to **33,456 ms** in build time, which was the total duration of the re-executed cacheable tasks.
    
          ### 4. Recommendation
    
          You should investigate the inputs for the listed tasks (e.g., `:app:processReleaseResources`, `:app:anotherProblematicTask`) to confirm whether they are non-relocatable. Look for any inputs that use absolute paths and convert them to use relative paths or other Gradle-provided APIs that ensure relocatability. This will allow the tasks to be fully cached and avoided in subsequent builds, regardless of the project's location.
          ```
          
          ---
          
          Now, analyze the following build data and generate the report as instructed:
          
          ```
          ${{ steps.fetch-results.outputs.results-exp3 }}
          ```
    - name: Capture results
      shell: bash
      env:
        SUMMARY_EXP3: ${{ steps.summarize-results-exp3.outputs.summary }}
      run: |
        echo "## Experiment 3" >> $GITHUB_STEP_SUMMARY
        echo "$SUMMARY_EXP3" >> $GITHUB_STEP_SUMMARY

name: Run Experiment

on:
  workflow_dispatch:

env:
  DEVELOCITY_URL: "https://ge.solutions-team.gradle.com"
  GIT_REPO: "https://github.com/gradle/common-custom-user-data-gradle-plugin"
  TASKS: "assemble"

jobs:
  experiment:
    strategy:
      fail-fast: false
      matrix:
        include:
          - experimentId: 3
    runs-on: ubuntu-latest
    outputs:
      exp3-results: ${{ steps.fetch-results.outputs.exp3-results }}
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          java-version: 17
          distribution: "temurin"
      - name: Download latest version of the validation scripts
        uses: gradle/develocity-build-validation-scripts/.github/actions/gradle/download@actions-stable
        with:
          downloadDevelopmentRelease: true
      - name: Run experiment 3
        uses: gradle/develocity-build-validation-scripts/.github/actions/gradle/experiment-3@actions-stable
        env:
          DEVELOCITY_ACCESS_KEY: "${{ secrets.DEVELOCITY_ACCESS_KEY }}"
        with:
          gitRepo: ${{ env.GIT_REPO }}
          tasks: ${{ env.TASKS }}
          develocityUrl: ${{ env.DEVELOCITY_URL }}
          failIfNotFullyCacheable: true
      - name: Fetch experiment results
        id: fetch-results
        working-directory: develocity-gradle-build-validation
        env:
          EXPERIMENT_ID: ${{ matrix.experimentId }}
        run: |
          build_scans="$(cat ".data/03-validate-local-build-caching-different-locations/latest/build-scans.csv")"
          develocity_server="$(echo "$build_scans" | tail -1 | cut -d ',' -f3)"
          second_build_scan_id="$(echo "$build_scans" | tail -1 | cut -d ',' -f5)"
          second_build_results="$(curl -s \
            -H "Authorization: Bearer ${{ secrets.DEVELOCITY_API_KEY }}" \
            "$develocity_server/api/builds/$second_build_scan_id/gradle-build-cache-performance")"
          echo "exp$EXPERIMENT_ID-results=$second_build_results" >> "$GITHUB_OUTPUT"

  analyze:
    runs-on: ubuntu-latest
    needs: experiment
    steps:
      - name: Analyze experiment results
        id: analyze
        uses: google-github-actions/run-gemini-cli@v0.1.13
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          prompt: |
            You are a **Develocity Solutions Engineer**, an expert in optimizing Gradle and Maven builds.
            Your primary mission is to analyze JSON results from a Develocity Build Validation Script and provide actionable recommendations to improve build performance.
            
            ***
            
            ## Context: Build Validation Experiment
            
            The script you are analyzing tests for **non-relocatable tasks**.
            These are tasks that cannot be reused from the build cache when the project's location on the file system changes.
            This is a common and significant source of avoidable work in builds.
            
            The experiment follows a precise two-step process:
            1.  **Build 1:** A build is run with a typical invocation (e.g., './gradlew clean build') to populate an empty local build cache.
            2.  **Build 2:** The exact same build is immediately run from a different directory, using the cache populated by the first build.
            
            Ideally, all cacheable tasks in Build 2 should be pulled from the cache ('FROM_CACHE').
            Your analysis will focus on tasks that were executed again in the second build, as this indicates they have non-relocatable inputs (e.g., absolute paths) that break cacheability.
            
            ***
            
            ## Your Task
            
            You will be provided with the JSON API response from the **second build**. Your analysis must perform the following:
            
            1.  **Identify Problematic Tasks**: Using the 'taskExecution' array, pinpoint the cacheable tasks that were re-executed instead of being pulled from the cache. The specific 'avoidanceOutcome' to look out for is 'executed_cacheable'.
            2.  **Diagnose the Root Cause**: The root cause is almost certainly non-relocatable inputs. Clearly state that these tasks are re-running because their inputs likely contain absolute paths that changed between the two builds, invalidating their cache key.
            3.  **Quantify the Impact**: Reference the 'duration' field of the task to explain the potential time savings that could be achieved by fixing these tasks.
            4.  **Provide Actionable Recommendations**: Deliver a clear, expert recommendation. Explain that the user needs to investigate the inputs of the identified tasks and convert any absolute paths to relative paths to ensure they are relocatable and fully cacheable.
            
            Your response should be structured, clear, and directly help the user understand both the problem and the solution.
            
            Second build's results: ${{ needs.experiment.outputs.exp3-results }}
      - name: Capture experiment analysis
        env:
          EXPERIMENT_SUMMARY: ${{ steps.analyze.outputs.summary }}
        run: |
          echo "$EXPERIMENT_SUMMARY" >> "$GITHUB_STEP_SUMMARY"
